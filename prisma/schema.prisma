generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ErpUser {
  id         Int       @id @default(autoincrement())
  name       String
  uuid       String?
  phone      String?
  dateTimeCreated   DateTime @default(now())
  avatar     String?
  email      String 
  password   String
  status     ErpUserStatus @default(ACTIVE)
  TokenErp     TokenErp[]
  franchise  Franchise? @relation(name: "FranchiseOwner")

  franchiseEmployee  Franchise? @relation(name: "FranchiseEmployees", fields: [franchiseEmployeeId], references: [id])
  franchiseEmployeeId Int? // id на франшизу сотрудником которой он является

  role      ErpUserRoles @default(MANAGER)
  forgotPassToken ForgotPasswordModel?
  inviter         ErpUser?            @relation("Inviter", fields: [inviterId], references: [id])
  inviterId       Int?
  invitedUsers    ErpUser[]           @relation("Inviter")
  platform UserPlatform @default(WEB)
}

model Franchise {
  id       Int      @id @default(autoincrement())
  ownerId   Int?      @unique
  owner     ErpUser?     @relation(name: "FranchiseOwner", fields: [ownerId], references: [id])

  employees ErpUser[] @relation(name: "FranchiseEmployees")

  organization String
  taxpayerIdNumber String?
  legalAddress String
  youKassaAccount String
  cloudpaymentsKey String?
  priceForScooterMonth Float? 
  workStatus FranchiseWorkStatus @default(WORK)
  scooters Scooter[]
  geofences Geofence[]
  cityId Int @unique
  city City @relation(fields: [cityId], references: [id])
  supportLink String?
  finesIssued Fine[] 
}

model City {
  id       Int      @id @default(autoincrement())
  name String
  subject String
  lat Float
  lng Float
  geofences Geofence[]
  franchise    Franchise?
}

model User {
  id       Int      @id @default(autoincrement())
  clientId String   @unique
  name     String?
  phone    String
  email    String?
  balance   Float    @default(0.0)
  bonuses Float     @default(0)
  spending Float? 
  lastActivity DateTime @default(now())
  dateTimeCreated DateTime @default(now())
  status          UserStatus @default(ACTIVE)
  trips   Trip[]
  paymentMethods         PaymentMethod[]
  payments               Payment[]
  platform               UserPlatform @default(MOBILE)
  activePaymentMethod    Int?   
  subscriptionsOptions   UserSubscriptionsOptions?
  usedPromocodes Promocode[]
  activeTrips ActiveTrip[]
  fines Fine[]
}

model Payment {
  id Int @id @default(autoincrement())
  service PaymentService
  type PaymentType
  status PaymentStatus
  amount Float?
  description String?
  bonusesUsed Float? @default(0.0)
  paymentMethodId      Int?      
  paymentMethod        PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  userId      Int?
  datetimeCreated DateTime @default(now())      
  user        User?  @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id Int @id @default(autoincrement())
  paymentId String @unique
  idempotenceKey String?
  active Boolean  @default(false)
  userId Int
  user           User     @relation(fields: [userId], references: [id])
  type String
  cardFirstSix String?
  cardLastFour String?
  expYear String?
  expMonth String?
  cardType String?
  payments Payment[]
  accountId String?
}

model TokenErp {
  token     String   @unique
  exp       DateTime
  erpUser      ErpUser     @relation(fields: [erpUserId], references: [id], onDelete: Cascade)
  erpUserId    Int
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Trip {
  id             Int      @id @default(autoincrement())
  tripId         String
  startTime      DateTime @default(now())
  endTime        DateTime?
  travelTime     String?
  photo          String?
  bonusesUsed    Float? 
  price          Float?
  distance       Int?
  userId         Int?
  rating         Int?
  user           User?     @relation(fields: [userId], references: [id])
  tariffId       Int?    
  tariff         Tariff?   @relation(fields: [tariffId], references: [id])
  scooterId      Int?      
  scooter        Scooter?  @relation(fields: [scooterId], references: [id])
  coordinates    String?
  fines Fine[]
}

model ActiveTrip {
  id      Int      @id @default(autoincrement())
  tripUUID String @unique
  userId Int 
  user User @relation(fields: [userId], references: [id])

  @@map("active_trip")
}

model Scooter {
  id               Int      @id @default(autoincrement())
  deviceId         String   @unique
  deviceIMEI       String?   @unique
  qrCode           String
  serialNumber     String
  batteryLevel     Int     
  status           ScooterStatus @default(ACTIVE)
  power            Boolean @default(false) 
  rented           Boolean @default(false)

  addedDate        DateTime   @default(now())
  photo            String?   

  controlledStatuses ControlledStatuses @default(ONLINE)
  modelId         Int     
  model           ScooterModel   @relation(fields: [modelId], references: [id], name: "ScooterModels")
  trips           Trip[]

  franchiseId Int
  franchise Franchise @relation(fields: [franchiseId], references: [id])
}

model ScooterModel {
  id               Int      @id @default(autoincrement())
  modelName        String   @unique
  scooters         Scooter[]   @relation("ScooterModels")
  chargeReserve    Int?
}

model Parking {
  id       Int      @id @default(autoincrement())
  address  String?
  photo    String?  // Предполагается, что это будет ссылка на файл/фотографию
  latitude Float
  longitude Float
  radius   Int      // Замените на тип, который отражает радиус  
}

model Tariff {
  id                      Int            @id @default(autoincrement())
  name                    String
  boardingCost            Float
  minuteCost              Float
  pauseCost               Float
  reservationCost         Float
  colorHex                String
  status                  TariffStatus   @default(ACTIVE)  
  addedDate               DateTime       @default(now())
  trips                   Trip[]
  orderInList             Int            @default(autoincrement())
  type                    TariffType     @default(MINUTE)
  fixedCost               Float?          @default(0.0)
  fixedCostMinutes        Int            @default(0) 
  costForMinuteAfterFixed Float          @default(0.0)
}

model Promocode {
  id                 Int      @id @default(autoincrement())
  code               String   @unique
  sum                String
  addedDate          DateTime   @default(now())
  dateStart          DateTime
  dateEnd            DateTime
  type               PromocodeType @default(BALANCE)
  status             PromocodeStatus @default(ACTIVE)
  usedByUsers        User[]
}

model Geofence {
  id                      Int      @id @default(autoincrement())
  uuid                    String?
  name                    String?   @unique
  coordinates             String?
  radius                  Float?
  dateTimeCreated         DateTime @default(now())
  allTimeSpeedLimit       Int?
  firtsTimePeriodStart    String?
  firstTimePeriodEnd      String?
  firstSpeedLimit         Int?
  secondTimePeriodStart   String?
  secondTimePeriodEnd     String?
  secondSpeedLimit        Int?
  address                 String?
  img                     String?
  typeId                  Int?      
  type                    GeofenceType?  @relation(fields: [typeId], references: [id])

  cityId Int
  city City @relation(fields: [cityId], references: [id])

  franchiseId Int
  franchise Franchise @relation(fields: [franchiseId], references: [id])
}


model GeofenceType {
  id                 Int      @id @default(autoincrement())
  uuid               String
  name               String   @unique
  subTitle           String?
  slug               String
  img                String?
  drawType           GeofenceDrawType @default(POLYGON)
  canParking         Boolean @default(false)
  canRiding          Boolean @default(false)
  description        String?
  secondDescription  String?
  parkingPrice       Float?
  colorHex           String
  isParkingFine      Boolean @default(false)
  isScooterBehavior  Boolean @default(false)
  noiceToTheClient   Boolean @default(false)
  geofences          Geofence[]
  params             GeofenceTypeParams?
}

model GeofenceTypeParams {
  id                          Int      @id @default(autoincrement())
  zoneTimeCondition           String?
  parkingFinePrice            Float?
  speedReduction              Int?
  notificationMessage         String?
  geofenceTypeId              Int      @unique
  geofenceType                GeofenceType @relation(fields: [geofenceTypeId], references: [id])
}

model ForgotPasswordModel {
  id                          Int      @id @default(autoincrement())
  token String
  userId Int @unique
  user   ErpUser    @relation(fields: [userId], references: [id])
  expiredTime DateTime
  dateTimeCreated  DateTime @default(now())
  @@map("forgot-password")
}

model Subscription {
  id                          Int      @id @default(autoincrement())
  uuid  String
  dateTimeCreated  DateTime @default(now())
  name  String
  price Float
  days Int
  payForStartTrip Boolean @default(false)
  options UserSubscriptionsOptions[]
}

model UserSubscriptionsOptions {
  id                          Int            @id @default(autoincrement())
  purchaseDate                DateTime       @default(now())
  expDate                     DateTime
  autoPayment                 Boolean        @default(false)
  subscriptionId              Int 
  subscription                Subscription   @relation(fields: [subscriptionId], references: [id])
  userId                      Int            @unique
  user                        User           @relation(fields: [userId], references: [id])
}

model Settings {
  id   Int            @id @default(autoincrement())
  scooterSettings     Json @default("{ \"metersToBooking\": 1500, \"metersToRent\": 1000 }")
  companySettings     Json  @default("{}")
  tripSettings        Json @default("{}")
  promocodeSettings   Json @default("{}")
}

model Fine {
  id   Int            @id @default(autoincrement())
  fineNumber String @unique
  tripUUID String
  deviceType DeviceType
  causeType FineReason

  causeText String

  description String
  createdAt DateTime @default(now())
  closedAt DateTime?
  photos String[]
  initiatorId Int
  initiator Franchise @relation(fields: [initiatorId], references: [id])

  tripId Int
  trip Trip @relation(fields: [tripId], references: [id])

  intruderId Int 
  intruder User @relation(fields: [intruderId], references: [id])

  price Int
  paidStatus FinePaidStatus @default(NOTPAID)

  @@map("fine")
}

enum TariffType {
  FIXED
  MINUTE
}

enum FineReason {
  DAMAGE
  LOSS
  OUTPARKING
}

enum FinePaidStatus {
  PAID
  NOTPAID
}

enum DeviceType {
  SCOOTER
  BIKE
}

enum PaymentService {
  TRIP
  SUBSCRIPTION
  BALANCE
}

enum PaymentType {
  WRITEOFF
  REPLACEMENT
}

enum PaymentStatus {
  PAID
  CANCELED
  CAPTURE
}

enum ScooterStatus {
  ACTIVE
  SERVICE
  REPAIR
}

enum ErpUserRoles {
  ADMIN
  EMPLOYEE
  MANAGER
  TECHNICIAN
  FRANCHISE
}

enum ErpUserStatus {
  ACTIVE
  DELETED
}

enum TariffStatus {
  ACTIVE
  ARCHIVE
}

enum PromocodeStatus {
  ACTIVE
  ARCHIVE
}

enum FranchiseWorkStatus {
  WORK
  PAUSE
  WINTERING
}

enum PromocodeType {
  BALANCE
}

enum UserStatus {
  ACTIVE
  DELETED
}

enum GeofenceDrawType {
  POLYGON
  POLYLINE
  CIRCLE
}

enum PaymentMethodType {
  CARD
  SBP
  SBERPAY
}

enum UserPlatform {
  WEB
  MOBILE
}


enum ControlledStatuses {
  ONLINE
  BLOCKED
  CHARGE
  REPAIR
}