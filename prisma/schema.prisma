generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ErpUser {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String
  email      String 
  password   String
  TokenErp     TokenErp[]
  franchise  Franchise?
  role      ErpUserRoles @default(WORKER)
  franchiseId Int?
}

model Franchise {
  id       Int      @id @default(autoincrement())
  erpUserId   Int      @unique
  eprUser     ErpUser     @relation(fields: [erpUserId], references: [id], onDelete: Cascade)
  scooters Scooter[] @relation("FranchiseScooters")
  city     String?
  income   Int?
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  phone    String
  email    String?

  tariffId           Int?      // Внешний ключ для связи с тарифом
  tariff             Tariff?   @relation(fields: [tariffId], references: [id], name: "UserTariffs")

  trips   Trip[]
}

model TokenErp {
  token     String   @unique
  exp       DateTime
  erpUser      ErpUser     @relation(fields: [erpUserId], references: [id], onDelete: Cascade)
  erpUserId    Int
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Trip {
  id             Int      @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime
  travelTime     String
  photo          String 
  price          Int
  scooterId      Int
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
}

model Scooter {
  id               Int      @id @default(autoincrement())
  deviceId         String   @unique
  qrCode           String
  serialNumber     String
  franchiseId      Int?
  franchise        Franchise? @relation(fields: [franchiseId], references: [id], name: "FranchiseScooters")
  // city          String   Возможно заменю на ENUM
  batteryLevel     Int     
  status           ScooterStatus @default(ACTIVE)
  power            Boolean @default(false) 

  addedDate        DateTime   @default(now()) // Дата добавления
  photo            String?    // Путь к файлу фотографии или URL

  parkingId        Int
  parking          Parking  @relation(fields: [parkingId], references: [id])

  modelId        Int     
  model          ScooterModel   @relation(fields: [modelId], references: [id], name: "ScooterModels")
}

model ScooterModel {
  id               Int      @id @default(autoincrement())
  modelName        String   @unique
  scooters         Scooter[]   @relation("ScooterModels")

}

model Parking {
  id       Int      @id @default(autoincrement())
  address  String?
  photo    String?  // Предполагается, что это будет ссылка на файл/фотографию
  latitude Float
  longitude Float
  radius   Int      // Замените на тип, который отражает радиус
  
  scooters Scooter[]
}

model Tariff {
  id                 Int      @id @default(autoincrement())
  name               String
  boardingCost       Float
  minuteCost         Float
  pauseCost         Float
  fixedCost          Float?
  reservationCost   Float
  colorHex           String
  status             TariffStatus @default(ACTIVE)  
  users              User[]   @relation("UserTariffs")
}

model Promocode {
  id                 Int      @id @default(autoincrement())
  code               String
  sum                String
  addedDate          DateTime   @default(now())
  dateStart          DateTime
  dateEnd            DateTime
  type               PromocodeType @default(BALANCE)
  status             PromocodeStatus @default(ACTIVE)
}

enum ScooterStatus {
  ACTIVE
  SERVICE
}

enum ErpUserRoles {
  ADMIN
  WORKER
  FRANCHISE
}

enum TariffStatus {
  ACTIVE
  ARCHIVE
}

enum PromocodeStatus {
  ACTIVE
  ARCHIVE
}

enum PromocodeType {
  BALANCE
}