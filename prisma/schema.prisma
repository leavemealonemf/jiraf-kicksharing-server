generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ErpUser {
  id         Int       @id @default(autoincrement())
  name       String
  uuid       String?
  phone      String?
  dateTimeCreated   DateTime @default(now())
  avatar     String?
  email      String 
  password   String
  status     ErpUserStatus @default(ACTIVE)
  TokenErp     TokenErp[]
  franchise  Franchise?
  role      ErpUserRoles @default(MANAGER)
  franchiseId Int?
  forgotPassToken ForgotPasswordModel?
  inviter         ErpUser?            @relation("Inviter", fields: [inviterId], references: [id])
  inviterId       Int?
  invitedUsers    ErpUser[]           @relation("Inviter")
}

model Franchise {
  id       Int      @id @default(autoincrement())
  erpUserId   Int      @unique
  eprUser     ErpUser     @relation(fields: [erpUserId], references: [id], onDelete: Cascade)
  city     String?
  income   Int?
}

model User {
  id       Int      @id @default(autoincrement())
  clientId String
  name     String?
  phone    String
  email    String?
  balance  Float  @default(0.0)
  spending Float? 
  lastActivity DateTime @default(now())
  dateTimeCreated DateTime @default(now())
  status          UserStatus @default(ACTIVE)
  trips   Trip[]
  subscriptionId         Int?     
  subscription           Subscription?   @relation(fields: [subscriptionId], references: [id], name: "UserSubsctiption")
}

model TokenErp {
  token     String   @unique
  exp       DateTime
  erpUser      ErpUser     @relation(fields: [erpUserId], references: [id], onDelete: Cascade)
  erpUserId    Int
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Trip {
  id             Int      @id @default(autoincrement())
  tripId         String
  startTime      DateTime
  endTime        DateTime
  travelTime     String
  photo          String 
  price          Int
  distance       Float?
  userId         Int
  rating         Int?
  user           User     @relation(fields: [userId], references: [id])
  tariffId       Int?    
  tariff         Tariff?   @relation(fields: [tariffId], references: [id])
  scooterId      Int?      
  scooter        Scooter?  @relation(fields: [scooterId], references: [id])
  coordinates    TripCoordinates[]
}

model TripCoordinates {
  id             Int      @id @default(autoincrement())
  latLon         Float[]
  tripId         Int?
  trip           Trip?    @relation(fields: [tripId], references: [id])
}

model Scooter {
  id               Int      @id @default(autoincrement())
  deviceId         String   @unique
  qrCode           String
  serialNumber     String
  batteryLevel     Int     
  status           ScooterStatus @default(ACTIVE)
  power            Boolean @default(false) 

  addedDate        DateTime   @default(now())
  photo            String?   

  modelId         Int     
  model           ScooterModel   @relation(fields: [modelId], references: [id], name: "ScooterModels")
  trips           Trip[]
}

model ScooterModel {
  id               Int      @id @default(autoincrement())
  modelName        String   @unique
  scooters         Scooter[]   @relation("ScooterModels")

}

model Parking {
  id       Int      @id @default(autoincrement())
  address  String?
  photo    String?  // Предполагается, что это будет ссылка на файл/фотографию
  latitude Float
  longitude Float
  radius   Int      // Замените на тип, который отражает радиус  
}

model Tariff {
  id                 Int      @id @default(autoincrement())
  name               String
  boardingCost       Float
  minuteCost         Float
  pauseCost         Float
  fixedCost          Float?
  reservationCost   Float
  colorHex           String
  status             TariffStatus @default(ACTIVE)  
  addedDate          DateTime @default(now())
  trips              Trip[]
}

model Promocode {
  id                 Int      @id @default(autoincrement())
  code               String
  sum                String
  addedDate          DateTime   @default(now())
  dateStart          DateTime
  dateEnd            DateTime
  type               PromocodeType @default(BALANCE)
  status             PromocodeStatus @default(ACTIVE)
}

model Geofence {
  id                      Int      @id @default(autoincrement())
  uuid                    String?
  name                    String?   @unique
  coordinates             String?
  radius                  Float?
  dateTimeCreated         DateTime @default(now())
  allTimeSpeedLimit       Int?
  firtsTimePeriodStart    String?
  firstTimePeriodEnd      String?
  firstSpeedLimit         Int?
  secondTimePeriodStart   String?
  secondTimePeriodEnd     String?
  secondSpeedLimit        Int?
  address                 String?
  img                     String?
  typeId                  Int?      
  type                    GeofenceType?  @relation(fields: [typeId], references: [id])
}


model GeofenceType {
  id                 Int      @id @default(autoincrement())
  uuid               String
  name               String   @unique
  subTitle           String?
  slug               String
  img                String?
  drawType           GeofenceDrawType @default(POLYGON)
  canParking         Boolean @default(false)
  canRiding          Boolean @default(false)
  description        String?
  secondDescription  String?
  parkingPrice       Float?
  colorHex           String
  isParkingFine      Boolean @default(false)
  isScooterBehavior  Boolean @default(false)
  noiceToTheClient   Boolean @default(false)
  geofences          Geofence[]
  params             GeofenceTypeParams?
}

model GeofenceTypeParams {
  id                          Int      @id @default(autoincrement())
  zoneTimeCondition           String?
  parkingFinePrice            Float?
  speedReduction              Int?
  notificationMessage         String?
  geofenceTypeId              Int      @unique
  geofenceType                GeofenceType @relation(fields: [geofenceTypeId], references: [id])
}

model ForgotPasswordModel {
  id                          Int      @id @default(autoincrement())
  token String
  userId Int @unique
  user   ErpUser    @relation(fields: [userId], references: [id])
  expiredTime DateTime
  dateTimeCreated  DateTime @default(now())
  @@map("forgot-password")
}

model Subscription {
  id                          Int      @id @default(autoincrement())
  uuid  String
  dateTimeCreated  DateTime @default(now())
  name  String
  price Float
  users User[] @relation("UserSubsctiption")
}

enum ScooterStatus {
  ACTIVE
  SERVICE
  REPAIR
}

enum ErpUserRoles {
  ADMIN
  MANAGER
  TECHNICIAN
}

enum ErpUserStatus {
  ACTIVE
  DELETED
}

enum TariffStatus {
  ACTIVE
  ARCHIVE
}

enum PromocodeStatus {
  ACTIVE
  ARCHIVE
}

enum PromocodeType {
  BALANCE
}

enum UserStatus {
  ACTIVE
  DELETED
}

enum GeofenceDrawType {
  POLYGON
  POLYLINE
  CIRCLE
}